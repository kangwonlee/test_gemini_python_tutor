name: Autograding Tests
on:
  push:
  workflow_dispatch:
  repository_dispatch:
  schedule:
    - cron: '45 01 21 * *'

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
        cache-suffix: "uv"
        cache-dependency-glob: "./requirements.txt"

    - name: Create venv
      id: pip-cache
      run: uv venv test-env

    - name: Setup test environment
      id: setup-env
      run: |
        source test-env/bin/activate
        echo $VIRTUAL_ENV
        uv pip install -r ./requirements.txt

    - name: Set report file names
      id: json
      run: |
        echo "syntax=report_syntax.json" >> $GITHUB_OUTPUT
        echo "style=report_style.json" >> $GITHUB_OUTPUT
        echo "results=report_results.json" >> $GITHUB_OUTPUT

    - name: check syntax
      id: check-syntax
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: check syntax
        setup-command: ". test-env/bin/activate && echo $VIRTUAL_ENV && uv pip list"
        command: ". test-env/bin/activate && python -m pytest --json-report --json-report-indent=4 --json-report-file=${{ steps.json.outputs.syntax }} tests/test_syntax.py"
        timeout: 1
        max-score: 2

    - name: check style
      id: check-style
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: check style
        setup-command: ". test-env/bin/activate && echo $VIRTUAL_ENV && uv pip list"
        command: ". test-env/bin/activate && python -m pytest --json-report --json-report-indent=4 --json-report-file=${{ steps.json.outputs.style }} tests/test_style.py"
        timeout: 1
        max-score: 1
  
    - name: test results
      id: test-results
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: test results
        setup-command: ". test-env/bin/activate && echo $VIRTUAL_ENV && uv pip list"
        command: ". test-env/bin/activate && python -m pytest -n auto --json-report --json-report-indent=4 --json-report-file=${{ steps.json.outputs.results }} tests/test_results.py"
        timeout: 2
        max-score: 2

    - name: Autograding Reporter
      uses: classroom-resources/autograding-grading-reporter@v1
      env:
        CHECK-SYNTAX_RESULTS: "${{steps.check-syntax.outputs.result}}"
        CHECK-STYLE_RESULTS: "${{steps.check-style.outputs.result}}"
        TEST-RESULTS_RESULTS: "${{steps.test-results.outputs.result}}"
      with:
        runners: check-syntax,check-style,test-results

    - name: upload artifacts
      id: artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: images_reports
        path: |
          ./*.png
          ./*.json
        retention-days: 21
        overwrite: true

  ai-tutor:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        max-parallel: 2
        language: [English, Korean, "Bahasa Indonesia", Chinese, French, German, Italian, Japanese, Nederlands, Norwegian, Spanish, Swedish, Thai, Vietnamese]
    needs: run-autograding-tests
    if: ${{ always() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: images_reports

      - name: AI Tutor
        uses: kangwonlee/gemini-python-tutor@main
        id: ai_tutor
        with:
          report-files: report_syntax.json,report_style.json,report_results.json    # Use the downloaded report file
          student-files: exercise.py
          readme-path: README.md
          api-key: ${{ secrets.GOOGLE_API_KEY }}
          explanation-in: ${{ matrix.language }}
        timeout-minutes: 5
